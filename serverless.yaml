service: my-player-performance-api
frameworkVersion: '3'
useDotenv: true

package:
  individually: false
  patterns:
    - '!*/**'
    - dist/**
    - node_modules/**
    - '!node_modules/aws-sdk/**'
plugins:
  - serverless-deployment-bucket
  - serverless-offline

provider:
  name: aws
  region: ${opt:region, env:AWS_REGION}
  profile: ${env:AWS_PROFILE}
  deploymentMethod: direct
  runtime: nodejs14.x
  architecture: arm64
  lambdaHashingVersion: '20201221'
  memorySize: 1024
  timeout: 28 # API Gateway timeout
  versionFunctions: false
  logRetentionInDays: 14
  # Resources Tagging Section
  stackTags:
    Project: my-player-performance
    Owner: FFT
    Name: ${self:service}-${sls:stage}
    Stage: ${sls:stage}
    Tier: application
    ManagedBy: serverless

  iam:
    role:
      # not secure for production use !
      statements:
        - Effect: 'Allow'
          Action: '*'
          Resource: '*'

  deploymentBucket:
    name: ${env:DEPLOYMENT_BUCKET_NAME_PREFIX, self:service}-${sls:stage}-sls-state

  # Lambda Runtime env vars
  environment:
    ENDPOINT_URL: ${env:ENDPOINT_URL}

custom:
  # *** serverless-deployment-bucket config ***
  deploymentBucket:
    accelerate: true
    blockPublicAccess: true
  # *** serverless-offline config ***
  serverless-offline:
    host: 127.0.0.1
    noPrependStageInUrl: true
    noAuth: true
    printOutput: false
    allowCache: true
    httpPort: 3000 # change this if conflicts with other applications
    lambdaPort: 3002

functions:
  # get all players api
  listPlayers:
    handler: dist/handlers/list-players.handler
    name: ${self:service}-listPlayers
    description: list players stats
    events:
      - httpApi:
          method: get
          path: /players

  # get player by ID api
  getPlayerById:
    handler: dist/handlers/get-player-by-id.handler
    name: ${self:service}-getPlayerById
    description: get a player stats by id
    events:
      - httpApi:
          method: get
          path: /players/{id}
